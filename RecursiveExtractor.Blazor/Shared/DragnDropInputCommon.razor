@using System.IO;
@using Tewr.Blazor.FileReader;
@inject Tewr.Blazor.FileReader.IFileReaderService fileReaderService;
@inject Microsoft.CST.RecursiveExtractor.Blazor.Services.AppData appData;

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }

    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }

    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
</style>
<h2>Encryption</h2>
<h4>Hide Passwords</h4>
<label for="hidePasswords">Obscure passwords in the GUI.</label>
<input type="checkbox" id="hidePasswords" @bind="HidePasswords" />
<br />
<h4>Passwords To Use</h4>
<label for="password">Password to Add:</label>
@if (HidePasswords)
{
    <input type="password" id="passwords" @bind="PasswordInput" />
}
else
{
    <input type="text" id="passwords" @bind="PasswordInput" />
}
<button @onclick="AddPasswordToList">Add Password to Usage List</button>
<br />
@if (Passwords.Any())
{
    <label>Passwords To Use:</label>
    <select @bind="SelectedPassword">
        @for (var i = 0; i < Passwords.Count; i++)
        {
            <option value="@i">@GetShownPassword(Passwords[i])</option>
        }
    </select>
    <button @onclick="RemovePasswordFromList">Remove Selected</button>
}
else
{
    <p>Add a password to try to decrypt archives.</p>
}

<h2>Upload File</h2>
<div class="@IpDropClass">
    <input type="file"
           class="clickable"
           @ref=dropTargetInput
           @onchange="OnInputChange"
           @ondragenter=OnIpDragEnter
           @ondragleave=OnIpDragLeave
           multiple />
    Drop Files here or click me.
</div>

<br />
<progress max="@max" value="@value" />
<button @onclick="ReadClick" class="btn btn-primary">Read file</button>
<button @onclick="ClearClick" class="btn btn-primary">Clear</button>
<br />
<div class="card">
    <div class="card-body">
        @Output
    </div>
</div>

@code {
    public string GetShownPassword(string password)
    {
        if (HidePasswords)
        {
            return "********";
        }
        else
        {
            return password;
        }
    }

    public long max;
    public long value;

    bool HidePasswords;
    private int NumFilesExtracted = 0;
    ElementReference dropTargetInput;
    IFileReaderRef ipReference
    {
        get
        {
            return _ipReference;
        }
        set
        {
            _ipReference = value;
        }
    }
    private IFileReaderRef _ipReference;
    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };
    string IpDropClass => string.Join(" ", _ipdropClasses);
    List<FileWithStream> IpFileList { get; } = new List<FileWithStream>();

    string PasswordInput { get; set; } = string.Empty;
    List<string> Passwords { get; set; } = new List<string>();
    int SelectedPassword { get; set; }

    string Output { get; set; } = string.Empty;
    private static readonly string nl = Environment.NewLine;

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            ipReference = fileReaderService.CreateReference(dropTargetInput);
        }
    }

    public async Task AddPasswordToList()
    {
        Passwords.Add(PasswordInput);
        PasswordInput = string.Empty;
    }

    public async Task RemovePasswordFromList()
    {
        Passwords.RemoveAt(SelectedPassword);
    }

    public async Task ClearClick()
    {
        await this.ClearAsync();
        await this.RefreshFileList();
    }

    private async Task ClearAsync()
    {
        appData.GuidToFileEntryMap.Clear();
        IpFileList.Clear();
    }

    private class FileWithStream { public IFileInfo FileInfo { get; set; } public AsyncDisposableStream Stream { get; set; } }

    public void OnIpDragEnter(EventArgs e) => _ipdropClasses.Add(dropTargetDragClass);

    public void OnIpDragLeave(EventArgs e) => _ipdropClasses.Remove(dropTargetDragClass);

    public async Task OnInputChange(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshFileList();
        await ReadClick();
    }

    private async Task RefreshFileList()
    {
        await this.ClearAsync();
        foreach (var file in await ipReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            IpFileList.Add(new FileWithStream { FileInfo = fileInfo, Stream = await file.OpenReadAsync() });
        }
        this.StateHasChanged();
    }
    public async Task ReadClick() => await ReadFile(ipReference);

    public async Task ReadFile(IFileReaderRef list)
    {
        appData.GuidToFileEntryMap.Clear();
        this.StateHasChanged();
        var extractor = new Extractor();

        // These formats aren't supported in WASM
        extractor.Unset(ArchiveFileType.P7ZIP);
        extractor.Unset(ArchiveFileType.RAR);
        extractor.Unset(ArchiveFileType.GZIP);
        extractor.Unset(ArchiveFileType.VHD);
        extractor.Unset(ArchiveFileType.WIM);

        var options = new ExtractorOptions()
        {
            EnableTiming = false,
            ExtractSelfOnFail = false,
            Passwords = new Dictionary<System.Text.RegularExpressions.Regex, List<string>>() { { new System.Text.RegularExpressions.Regex(".*"), Passwords } }
        };
        foreach (var pair in IpFileList)
        {
            var fileInfo = pair.FileInfo;
            max = fileInfo.Size;
            Output += $"Reading file {fileInfo.Name}{nl}";
            this.StateHasChanged();
            fileInfo.PositionInfo.PositionChanged += (s, e) =>
            {
                value = e.Position;
                this.StateHasChanged();
            };
            var entryStream = new FileStream(Path.GetTempFileName(), FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite, 4096, FileOptions.DeleteOnClose);
            await pair.Stream.CopyToAsync(entryStream);

            var entry = await FileEntry.FromStreamAsync(pair.FileInfo.Name, entryStream, null);
            var type = MiniMagic.DetectFileType(entry);
            switch (type)
            {
                case ArchiveFileType.RAR:
                case ArchiveFileType.P7ZIP:
                case ArchiveFileType.GZIP:
                case ArchiveFileType.VHD:
                    Output += $"{type} is not supported in the GUI, but is supported in the full RecursiveExtractor library.{nl}";
                    break;
                default:
                    var entries = extractor.ExtractAsync(entry.FullPath, entryStream, options);
                    await foreach (var foundEntry in entries)
                    {
                        appData.GuidToFileEntryMap[Guid.NewGuid().ToString()] = foundEntry;
                        NumFilesExtracted++;
                        this.StateHasChanged();
                    }
                    break;
            }
            Output += $"Finished extracting {NumFilesExtracted} files.  Click Browse Archive for results.";
        }
    }
}